@using System.Buffers.Binary
@using System.Collections
@using System.Text
@using System.Text.Json
@using NewTsWw.Models.Werewolf
@using WerewolfAchievementViewer.Components
@using WerewolfAchievementViewer.Werewolf

<div class="test-achs-container">
    <div class="test-achived-container achs-container">
        <div class="test-achs-header">
            <h2>Achieved:</h2>
            <i class="bi bi-caret-down-fill"
               data-bs-toggle="collapse"
               data-bs-target="#achived"
               aria-expanded="true"
               aria-controls="achived"></i>
        </div>

        <div class="test-achived-parts collapse show" id="achived">
            <Achievements AchievementInfos="AchievementInfos" />
        </div>
    </div>

    <div class="test-not-achived-container achs-container">
        <div class="test-achs-header">
            <h2>Missing:</h2>
        </div>

        <div class="test-not-achived-parts">
            @foreach(var achieveing in MissingAchievements?
              .GroupBy(x=> x.DetailedInfo?.AchievingType?? AchievementAchievingType.Normal)?? [])
            {
                <div class="test-not-achived-part @ToCSSClass(achieveing.Key)">
                    <div class="test-not-achived-part-header">
                        <h3>@achieveing.Key.GetNameAttribute()</h3>
                        <small>@achieveing.Key.GetDescriptionAttribute()</small>
                    </div>

                    <Achievements AchievementInfos="achieveing" />
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public IEnumerable<AchievementId>? AchievementIds { get; set; } = null;

    [Parameter]
    public IEnumerable<AchievementInfo>? AchievementInfos { get; set; } = null;

    [Parameter]
    public IEnumerable<AchievementInfo>? MissingAchievements { get; set; } = null;

    protected override void OnParametersSet()
    {
        AchievementInfos ??= AchievementIds is not null
            ? NewTsWw.Models.Werewolf.Achievements.All
                .Where(x => AchievementIds.Contains(x.AchievementId))
            : [];

        MissingAchievements = NewTsWw.Models.Werewolf.Achievements.All
            .Where(x => !AchievementInfos.Any(y => y.AchievementId == x.AchievementId));
    }

    static string ToCSSClass(AchievementAchievingType achievingType)
        => achievingType switch
        {
            AchievementAchievingType.Normal => "normal",
            AchievementAchievingType.Unavailable => "unavailable",
            AchievementAchievingType.NotViaPlaying => "not_via_playing",
            _ => ""
        };
}
