@page "/test"

@using System.Buffers.Binary
@using System.Collections
@using System.Text
@using System.Text.Json
@using WerewolfAchievementViewer.Components
@using WerewolfAchievementViewer.Werewolf

<PageTitle>Player Achievements</PageTitle>

<h1>Test</h1>
<p>Test add or remove achievements.</p>

<select @bind="@selectedAchievementId">
    @foreach (var Item in Enum.GetValues<AchievementId>())
    {
        <option value="@Item">@Item</option>
    }
</select>
<p>Selected item: @selectedAchievementId</p>
<button @onclick="AddItem">Add selected item</button>
<br />
<br />

<h2>Achievements</h2>
<p>url: @url</p>
<br />
@foreach (var achievementId in currentBitArray.GetUniqueFlags())
{
    <div class="col">
        <Achievement AchievementId="@achievementId" />
        <button @onclick="() => RemoveItem(achievementId)">Remove this</button>
    </div>
    <br />
}

@code {
    AchievementId selectedAchievementId;
    BitArray currentBitArray = new BitArray(200);

    string url
    {
        get
        {
            var result = JsonSerializer.Serialize(currentBitArray.ToByteArray());
            var url = $"https://localhost:7024/achs/{result}";
            return url;
        }
    }

    void AddItem()
    {
        if (!currentBitArray.HasFlag(selectedAchievementId))
        {
            currentBitArray.Set(selectedAchievementId);
            InvokeAsync(StateHasChanged);
        }
    }

    void RemoveItem(AchievementId achievementId)
    {
        if (currentBitArray.HasFlag(achievementId))
        {
            currentBitArray.Unset(achievementId);
            InvokeAsync(StateHasChanged);
        }
    }
}
